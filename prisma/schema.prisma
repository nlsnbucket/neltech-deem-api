// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id            Int             @id @default(autoincrement())
  phoneNumber   String          @map("phone_number")
  email         String?
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp
  updatedAt     DateTime        @default(now()) @map("updated_at") @db.Timestamp
  deletedAt     DateTime?       @map("deleted_at") @db.Timestamp
  CustomerOrder CustomerOrder[]
}

model CustomerOrder {
  id         Int      @id @default(autoincrement())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int      @map("customer_id")
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int      @map("order_id")
}

model Order {
  id            Int             @id @default(autoincrement())
  reason        String
  description   String
  offer         Int
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp
  updatedAt     DateTime        @default(now()) @map("updated_at") @db.Timestamp
  deletedAt     DateTime?       @map("deleted_at") @db.Timestamp
  CustomerOrder CustomerOrder[]
  Eligibility   Eligibility[]
}

model User {
  id          Int           @id @default(autoincrement())
  name        String
  username    String        @unique
  email       String
  password    String
  phone       String?
  createdAt   DateTime      @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime      @default(now()) @map("updated_at") @db.Timestamp
  deletedAt   DateTime?     @map("deleted_at") @db.Timestamp
  Eligibility Eligibility[]
}

model Eligibility {
  id        Int       @id @default(autoincrement())
  type      Boolean
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime  @default(now()) @map("updated_at") @db.Timestamp
  deletedAt DateTime? @map("deleted_at") @db.Timestamp

  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  order   Order @relation(fields: [orderId], references: [id])
  orderId Int
}
